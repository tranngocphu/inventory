name: Deploy to EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main'

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: inventory-cluster
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/inventory

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from specified branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}  # Use the input branch

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build and Test
        run: |
          go test ./... -v
          go build -o inventory ./cmd/inventory

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} -f docker/Dockerfile .
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      - name: Debug IAM Permissions
        run: |
          aws sts get-caller-identity
          aws eks list-clusters --region ${{ env.AWS_REGION }}
          aws eks describe-cluster-versions --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} || echo "Expected if cluster not yet created"

      - name: Create or Update EKS Cluster
        run: |
          # Check if cluster exists
          if eksctl get cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "Cluster ${{ env.EKS_CLUSTER_NAME }} already exists, skipping creation."
          else
            echo "Creating cluster ${{ env.EKS_CLUSTER_NAME }}..."
            eksctl create cluster -f deployments/eks/cluster.yaml
          fi

      - name: Update kubeconfig
        run: |
          eksctl utils write-kubeconfig --cluster ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl create secret generic db-credentials --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f deployments/k8s/postgres-deployment.yaml
          sed "s|{{DOCKER_IMAGE}}|${{ env.DOCKER_IMAGE }}:${{ github.sha }}|g" deployments/k8s/inventory-deployment.yaml | kubectl apply -f -

      - name: Verify Deployment
        run: |
          kubectl get pods --all-namespaces
          kubectl get svc
          echo "Homepage URL: http://$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type==\"ExternalIP\")].address}'):30080"